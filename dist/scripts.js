'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.displayPlan = exports.displayLast = exports.displayCost = undefined;

var _getSplitObj = require('./getSplitObj');

var _getSplitObj2 = _interopRequireDefault(_getSplitObj);

var _classData = require('./classData');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var calc = document.querySelector('#calc');
var displayCost = exports.displayCost = document.querySelectorAll('.costRes');
var displayLast = exports.displayLast = document.querySelectorAll('.lastMonth');
var displayCurrent = document.querySelectorAll('.currentMonth');
var displayDiff = document.querySelectorAll('.diffRes');
var displayAll = document.querySelectorAll('.allRes');
var displayPlan = exports.displayPlan = document.querySelector('#plan');
var total = document.querySelector('#total');
var result = document.querySelector('#result');

var createObj = function createObj(displayList) {
  var arrValue = [].concat(_toConsumableArray(displayList)).reduce(function (acc, elem) {
    return acc.concat(elem.value);
  }, []);
  if (arrValue.length === 5) {
    return new (Function.prototype.bind.apply(_classData.PriceData, [null].concat(_toConsumableArray(arrValue))))();
  }
  return new (Function.prototype.bind.apply(_classData.MouthData, [null].concat(_toConsumableArray(arrValue))))();
};

var prices = JSON.parse(localStorage.getItem('prices')) || '';

var lastMonth = JSON.parse(localStorage.getItem('lastMonth')) || '';

var currentMonth = JSON.parse(localStorage.getItem('currentMonth')) || '';

var plan = JSON.parse(localStorage.getItem('plan')) || '';

function displaying(nodes, obj) {
  nodes.forEach(function (node, index) {
    if (obj === '') {
      node.value = '';
    } else {
      node.value = (0, _getSplitObj2.default)(obj)[index];
    }
  });
}

displaying(displayCost, prices);
displaying(displayLast, lastMonth);
displayPlan.value = plan;
var objDiff = {};
function calcDifference(last, current) {
  return (0, _getSplitObj2.default)(last).reduce(function (acc, lastValue, index) {
    var currentValue = (0, _getSplitObj2.default)(current)[index];
    var currentKeys = (0, _getSplitObj2.default)(current, false)[index];
    var diff = currentValue - lastValue;
    acc[currentKeys] = diff;
    return acc;
  }, objDiff);
}

var objTariff = {};
function calcTariff(diff, price) {
  return (0, _getSplitObj2.default)(price, false).reduce(function (acc, priceKey, index) {
    var forTariff = void 0;
    var diffValue = (0, _getSplitObj2.default)(diff)[index];
    var priceValue = (0, _getSplitObj2.default)(price)[index];
    if (priceKey === 'sink') {
      forTariff = Number(Number(diffValue * priceValue).toFixed(2));
    } else {
      forTariff = Number(Number((0, _getSplitObj2.default)(diff)[index - 1] * priceValue).toFixed(2));
    }
    acc[priceKey] = forTariff;
    return acc;
  }, objTariff);
}

var calcTotal = function calcTotal(tariff) {
  return (0, _getSplitObj2.default)(tariff).reduce(function (sum, value) {
    return sum + value;
  }, 0);
};

function countUp() {
  prices = createObj(displayCost);
  currentMonth = createObj(displayCurrent);
  lastMonth = createObj(displayLast);
  plan = Number(Number(displayPlan.value).toFixed(2));

  localStorage.setItem('prices', JSON.stringify(prices));
  localStorage.setItem('currentMonth', JSON.stringify(currentMonth));
  localStorage.setItem('lastMonth', JSON.stringify(currentMonth));
  localStorage.setItem('plan', JSON.stringify(plan));

  displaying(displayDiff, calcDifference(lastMonth, currentMonth));
  displaying(displayAll, calcTariff(objDiff, prices));

  var totalValue = calcTotal(objTariff);
  total.textContent = totalValue;

  result.textContent = totalValue + plan;
}
calc.addEventListener('click', countUp);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,